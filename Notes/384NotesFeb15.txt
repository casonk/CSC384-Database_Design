CREATE TABLE statements

CREATE TABLE <tableName> (
	<list of schema elements>
);

schema element 1, schema element 2, ..., schema element n

schema element: column declaration | primary key declaration | unique declaration | foreign key declaration

column declaration: <nameOfCol> <typeOfCol>

CREATE TABLE studentInfo (
	studentID int,
	marks int
);

typeOfCol: int (or) integer, float, char(n), varchar(n), 
number(x, y)
date, datetime -- useful..
Oracle: int -- NUMBER (38, 0)

ssn char(11)		-- xxx-xx-xxxx
sFName varchar(10) 	-- 
gender char(1)		-- 'F' or 'M'

what data type will you choose for zipcode?

zipcode char(5)
ssn char(9)
phone ...

---------------------

primary key declaration: PRIMARY KEY (<listOfOneOrMoreColumns>)

Beers (beerName, manf)
no 2 beers have the same beerName

CREATE TABLE Beers (
	beerName VARCHAR(10),
	manf VARCHAR(20),
	PRIMARY KEY (beerName)
);

no 2 rows in Beers table will have the same value for beerName.

Data Manipulation Language (DML) statement to add rows to a table
------------------------------------------------------------------

INSERT INTO <tableName> VALUES (<listOfValues>);
listOfValues: 1 value for each column separated by , 

INSERT INTO Beers VALUES ('BudLight', 'A-B');	// inserts 1 row into the table

numbers
strings -- enclosed using '...' (only single-quotes; no double quotes)

-------------------

CREATE TABLE Beers (
	beerName VARCHAR(10),
	manf VARCHAR(20),
	PRIMARY KEY (beerName)
);

CREATE TABLE Bars (
	barName VARCHAR(10),
	addr VARCHAR(50),
	PRIMARY KEY (barName)
);

CREATE TABLE Sells (
	bar VARCHAR(10),		// how to enforce that bar must be present in the Bars table -- foreign key constraints
	beer VARCHAR(10),
	price NUMBER(4, 2),		// 0 to 99.99
	PRIMARY KEY (bar, beer)	// a bar sells a beer for only one price
);


CREATE TABLE R (
	col1 int,
	col2 int,
	col3 int,
	col4 int,
	PRIMARY KEY (col1),		// no 2 rows will have the same value for col1
	UNIQUE (col2)			// no 2 rows will have the same value for col2
);

what is the difference between primary key and unique?
	1. a table can have max of 1 primary key. no restrictions on number of unique keys
	2. you cannot have null values for any primary key columns
		-- unique: the non-null values do not repeat
		-- primary key: unique + NOT NULL

CREATE TABLE Emp (
	eID char(8),
	ssn char(9),
	eName VARCHAR(20),
	unique (eID),
	unique (ssn)
);

Sells: bar, beer, price

-------------------

foreign key constraints

foreign key declaration: FOREIGN KEY (listOfColumnsInThisTable) REFERENCES <tableName>(<listOfColumnsInReferencedTable)

CREATE TABLE Beers (
	beerName VARCHAR(10),
	manf VARCHAR(20),
	PRIMARY KEY (beerName)
);

CREATE TABLE Bars (
	barName VARCHAR(10),
	addr VARCHAR(50),
	PRIMARY KEY (barName)
);

CREATE TABLE Sells (
	bar VARCHAR(10),		-- how to enforce that bar must be present in the Bars table -- foreign key constraints
	beer VARCHAR(10),
	price NUMBER(4, 2),		-- 0 to 99.99
	PRIMARY KEY (bar, beer),	-- a bar sells a beer for only one price
	FOREIGN KEY (bar) REFERENCES Bars(barName)
);

what does this enforce? FOREIGN KEY (bar) REFERENCES Bars(barName)

the value for bar column (if it is not null) MUST be present in the Bars.barName
-- Sells.bar is acting like a pointer?? (identifying a Bar)

Can we have multiple rows in Sells table with the same bar?
-- yes.. 

Bars
barName		addr
Churchill's	a1
501 Bar		a2

Sells
bar			beer		price
Churchill's Budweiser	3.00
Churchill's	BudLight	3.50
null		null		2.50
Mani's Bar	BudLight	1.00	-- this row is not allowed

Requirements for foreign key declaration
-----------------------------------------

-- we can have composite foreign keys: foreign key (col1, col2) references Table1(col3, col4)
-- for Table1, there must be primary key (col3, col4) or unique (col3, col4)

----------------------------------------

CREATE TABLE Beers (
	beerName VARCHAR(10),
	manf VARCHAR(20),
	PRIMARY KEY (beerName)
);

CREATE TABLE Bars (
	barName VARCHAR(10),
	addr VARCHAR(50),
	PRIMARY KEY (barName)
);

CREATE TABLE Sells (
	bar VARCHAR(10),		-- how to enforce that bar must be present in the Bars table -- foreign key constraints
	beer VARCHAR(10),
	price NUMBER(4, 2),		-- 0 to 99.99
	PRIMARY KEY (bar, beer),	-- a bar sells a beer for only one price
	FOREIGN KEY (bar) REFERENCES Bars(barName),
	FOREIGN KEY (beer) REFERENCES Beers (beerName)
);
